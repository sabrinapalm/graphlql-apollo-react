{"version":3,"sources":["Components/LaunchItem.jsx","Components/Error.jsx","Components/MissionKey.jsx","Components/Launches.jsx","Components/Loader.jsx","Components/Launch.jsx","App.js","serviceWorker.js","index.js"],"names":["LaunchWrapper","styled","div","LaunchSection","Mission","h4","Date","p","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","Error","StatusWrapper","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","Component","Loader","LaunchHeader","h1","LaunchTitle","LaunchList","ul","li","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","Wrapper","Header","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ce414b7.chunk.js","sourcesContent":["import React from 'react';\nimport Moment from 'react-moment';\nimport styled from '@emotion/styled';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nconst LaunchWrapper = styled.div`\n  flex-direction: row;\n`;\n\nconst LaunchSection = styled.div`\n  flex: 1;\n`;\n\nconst Mission = styled.h4`\n  font-size: 1rem;\n`;\n\nconst Date = styled.p`\n  margin-top: 0;\n  margin-bottom: 0px;\n`;\n\nexport default function LaunchItem({\n  launch: { flight_number, mission_name, launch_date_local, launch_success }\n}) {\n  return (\n    <LaunchWrapper className='card card-body mb-3'>\n      <LaunchSection>\n        <Mission>\n          Mission:{' '}\n          <span\n            className={classNames({\n              'text-success': launch_success,\n              'text-danger': !launch_success\n            })}\n          >\n            {mission_name}\n          </span>\n        </Mission>\n        <Date>\n          Date: <Moment format='YYYY-MM-DD HH:mm'>{launch_date_local}</Moment>\n        </Date>\n      </LaunchSection>\n      <Link to={`/launch/${flight_number}`} className='btn btn-secondary'>\n        Launch details\n      </Link>\n    </LaunchWrapper>\n  );\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst ErrorBox = styled.div``;\n\nexport default function Error() {\n  return (\n    <div>\n      <p>Oops, something went wrong..</p>\n    </div>\n  );\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst StatusWrapper = styled.div`\n  margin-bottom: 2rem;\n  margin-top: 2rem;\n`;\n\nexport default function MissionKey() {\n  return (\n    <StatusWrapper>\n      <p>\n        <span className='px-3 mr-2 bg-success' /> = Success\n      </p>\n      <p>\n        <span className='px-3 mr-2 bg-danger' /> = Fail\n      </p>\n    </StatusWrapper>\n  );\n}\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport Error from './Error';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return <h4>Loading..</h4>;\n            if (error) return <Error />;\n            console.log(data);\n            return (\n              <>\n                {data.launches.map(launch => (\n                  <LaunchItem key={launch.flight_number} launch={launch} />\n                ))}\n              </>\n            );\n          }}\n        </Query>\n      </>\n    );\n  }\n}\n\nexport default Launches;\n","import React from 'react';\n\nexport default function Loader() {\n  return <div></div>;\n}\n","import React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Loader from './Loader';\nimport Error from './Error';\n\nimport classNames from 'classnames';\n\nconst LaunchHeader = styled.h1`\n  font-size: 1.5rem;\n`;\n\nconst LaunchTitle = styled.h4`\n  font-size: 1rem;\n  margin-top: 40px;\n  margin-bottom: 20px;\n`;\n\nconst LaunchList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  padding-left: 0;\n  margin-bottom: 0;\n`;\n\nconst LaunchItem = styled.li`\n  position: relative;\n  display: block;\n  padding: 0.75rem 1.25rem;\n  background-color: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  margin-bottom: 5px;\n`;\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport class Launch extends Component {\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n\n    return (\n      <>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, error, data }) => {\n            if (loading) return <Loader />;\n            if (error) return <Error />;\n\n            const {\n              mission_name,\n              flight_number,\n              launch_year,\n              launch_success,\n              rocket: { rocket_id, rocket_name, rocket_type }\n            } = data.launch;\n\n            return (\n              <div>\n                <LaunchHeader>\n                  <span className='text-dark'>Mission:</span> {mission_name}\n                </LaunchHeader>\n                <LaunchTitle>Launch Details</LaunchTitle>\n                <LaunchList>\n                  <LaunchItem>Flight Number: {flight_number}</LaunchItem>\n                  <LaunchItem>Launch Year: {launch_year}</LaunchItem>\n                  <LaunchItem>\n                    Launch Success:{' '}\n                    <span\n                      className={classNames({\n                        'text-success': launch_success,\n                        'text-danger': !launch_success\n                      })}\n                    >\n                      {launch_success ? 'Yes' : 'No'}\n                    </span>\n                  </LaunchItem>\n                </LaunchList>\n                <LaunchTitle>Rocket Details</LaunchTitle>\n                <LaunchList>\n                  <LaunchItem>Rocket ID: {rocket_id}</LaunchItem>\n                  <LaunchItem>Rocket Name: {rocket_name}</LaunchItem>\n                  <LaunchItem>Rocket Type: {rocket_type}</LaunchItem>\n                </LaunchList>\n                <hr />\n                <Link to='/' className='btn btn-secondary'>\n                  Back\n                </Link>\n              </div>\n            );\n          }}\n        </Query>\n      </>\n    );\n  }\n}\n\nexport default Launch;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Launches from './Components/Launches';\nimport Launch from './Components/Launch';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nconst Wrapper = styled.div`\n  margin: 50px;\n`;\n\nconst Header = styled.h1`\n  text-align: center;\n  margin-bottom: 50px;\n`;\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Wrapper>\n          <Header>SpaceX</Header>\n          <Route exact path='/' component={Launches} />\n          <Route exact path='/launch/:flight_number' component={Launch} />\n        </Wrapper>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}